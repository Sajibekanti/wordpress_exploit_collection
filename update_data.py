#!/usr/bin/python
# -*- coding: utf-8 -*-
import requests
import os
import time
import hashlib
import json

def ask(msg):
  return "\033[1m[?] " + msg + "\033[0m"

def notice(msg):
  return "\n\033[1m[i] " + msg + "\033[0m"

def critical(msg):
  return "\n\033[91m[!] " + msg + "\033[0m"

def warning(msg):
  return "\033[93m[i] " + msg + "\033[0m"

def info(msg):
  return "\033[0m[+] " + msg + "\033[0m"

def vulnerable(msg):
  return "\033[91m[!]" + msg + "\033[0m"

def display(msg):
  return "\033[0m | " + msg + "\033[0m"


def format_url(url):
    if not "http" in url:
        return "http://"+url
    return url

def unzip_file(filename):
    os.system('mv '+ filename + ' ' + filename + ".gz")
    os.system('gzip -d '+ filename+".gz")

def database_update():
  print("\033[93mUpdating database\033[92m - Last update: \033[0m" + database_last_date('database/local_vulnerable_files.xml'))
  update_url = "https://data.wpscan.org/"
  update_files = [ 'local_vulnerable_files.xml', 'local_vulnerable_files.xsd',
  'timthumbs.txt', 'user-agents.txt', 'wp_versions.xml', 'wp_versions.xsd',
  'wordpresses.json', 'plugins.json', 'themes.json']

  for f in update_files:
    print("\t\033[93mDownloading \033[0m"+ f +" \033[92mFile updated !\033[0m")
    download_raw_file(update_url+f, "database/"+f, True)

  unzip_file("database/user-agents.txt")
  unzip_file("database/timthumbs.txt")

def database_last_date(filename):
  if not os.path.isfile(filename):
    return "Never"
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(filename)
  return time.ctime(mtime)


def download_raw_file(url, filename, verbosity):
  try:

    # Open the request
    source = requests.get( url, stream=True).raw

    # Write the file
    with open( filename, 'wb+' ) as ddl_file:
      progress = 0
      while True:
          length = 16*1024
          buf = source.read(length)
          if not buf:
              break
          ddl_file.write(buf)
          progress += len(buf)

          if verbosity == True:
            print('\tDownloaded : %.2f Mo\r' % (float(progress)/(1024*1024))),

  except Exception as e:
    raise e

def download_file(url, filename, verbosity):
  try:

    # Open the request
    source = requests.get( url).text

    # Write the file
    with open( filename, 'wb' ) as ddl_file:
      ddl_file.write(source.encode('utf8'))

  except Exception as e:
    raise e

def remove_file(filename):
  try:
    os.remove(filename)
  except Exception as e:
    raise e



def md5_hash(filename):
  return hashlib.md5(open(filename, 'rb').read()).hexdigest()


def is_lower(str_one, str_two, equal):
  sum_one = 0
  sum_two = 0

  # Handle the NoneType
  if str_one == None:
      if str_two == None:
          return False
      else:
          return True

  if str_two == None:
      if str_one == None:
          return False
      else:
          return True

  # Fix for X.X <= X.X.X and X.X.X <= X.X
  if len(str_one) < 5:
    str_one += '.0'
  if len(str_two) < 5:
    str_two += '.0'

  str_one = str_one[::-1].split('.')
  str_two = str_two[::-1].split('.')

  for i in range(len(str_one)):
    try:
      sum_one += ((i+1) ** 10) * (int(str_one[i]))
      sum_two += ((i+1) ** 10) * (int(str_two[i]))
    except Exception as e:
      return True

  # For inferior
  if sum_one < sum_two:
    return True

  # Handle < and = if define in equal
  if equal and sum_one == sum_two:
    return True

  return False
